// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"DATABASE_URL","value":""},"config":null}]`

const schema = `datasource db {
  // could be postgresql or mysql
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model User {
  id        String   @id @default(cuid())
  username  String
  createdAt DateTime @default(now())
}

model Room {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  mediaFiles MediaFile[]
}

model MediaFile {
  id         String   @id @default(cuid())
  uploadedAt DateTime @default(now())
  roomId     String? // Make the roomId field nullable
  message    String?
  room       Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userName   String   @default("bot")
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "DATABASE_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.Room = roomActions{client: c}
	c.MediaFile = mediaFileActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// Room provides access to CRUD methods.
	Room roomActions
	// MediaFile provides access to CRUD methods.
	MediaFile mediaFileActions
}

// --- template enums.gotpl ---

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID        UserScalarFieldEnum = "id"
	UserScalarFieldEnumUsername  UserScalarFieldEnum = "username"
	UserScalarFieldEnumCreatedAt UserScalarFieldEnum = "createdAt"
)

type RoomScalarFieldEnum string

const (
	RoomScalarFieldEnumID        RoomScalarFieldEnum = "id"
	RoomScalarFieldEnumName      RoomScalarFieldEnum = "name"
	RoomScalarFieldEnumCreatedAt RoomScalarFieldEnum = "createdAt"
)

type MediaFileScalarFieldEnum string

const (
	MediaFileScalarFieldEnumID         MediaFileScalarFieldEnum = "id"
	MediaFileScalarFieldEnumUploadedAt MediaFileScalarFieldEnum = "uploadedAt"
	MediaFileScalarFieldEnumRoomID     MediaFileScalarFieldEnum = "roomId"
	MediaFileScalarFieldEnumMessage    MediaFileScalarFieldEnum = "message"
	MediaFileScalarFieldEnumUserName   MediaFileScalarFieldEnum = "userName"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldUsername userPrismaFields = "username"

const userFieldCreatedAt userPrismaFields = "createdAt"

type roomPrismaFields = prismaFields

const roomFieldID roomPrismaFields = "id"

const roomFieldName roomPrismaFields = "name"

const roomFieldCreatedAt roomPrismaFields = "createdAt"

const roomFieldMediaFiles roomPrismaFields = "mediaFiles"

type mediaFilePrismaFields = prismaFields

const mediaFileFieldID mediaFilePrismaFields = "id"

const mediaFileFieldUploadedAt mediaFilePrismaFields = "uploadedAt"

const mediaFileFieldRoomID mediaFilePrismaFields = "roomId"

const mediaFileFieldMessage mediaFilePrismaFields = "message"

const mediaFileFieldRoom mediaFilePrismaFields = "room"

const mediaFileFieldUserName mediaFilePrismaFields = "userName"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.Room = roomMock{
		mock: m,
	}

	m.MediaFile = mediaFileMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	Room roomMock

	MediaFile mediaFileMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type roomMock struct {
	mock *Mock
}

type RoomMockExpectParam interface {
	ExtractQuery() builder.Query
	roomModel()
}

func (m *roomMock) Expect(query RoomMockExpectParam) *roomMockExec {
	return &roomMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type roomMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *roomMockExec) Returns(v RoomModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *roomMockExec) ReturnsMany(v []RoomModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *roomMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type mediaFileMock struct {
	mock *Mock
}

type MediaFileMockExpectParam interface {
	ExtractQuery() builder.Query
	mediaFileModel()
}

func (m *mediaFileMock) Expect(query MediaFileMockExpectParam) *mediaFileMockExec {
	return &mediaFileMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type mediaFileMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *mediaFileMockExec) Returns(v MediaFileModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *mediaFileMockExec) ReturnsMany(v []MediaFileModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *mediaFileMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID        string   `json:"id"`
	Username  string   `json:"username"`
	CreatedAt DateTime `json:"createdAt"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID        RawString   `json:"id"`
	Username  RawString   `json:"username"`
	CreatedAt RawDateTime `json:"createdAt"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
}

// RoomModel represents the Room model and is a wrapper for accessing fields and methods
type RoomModel struct {
	InnerRoom
	RelationsRoom
}

// InnerRoom holds the actual data
type InnerRoom struct {
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	CreatedAt DateTime `json:"createdAt"`
}

// RawRoomModel is a struct for Room when used in raw queries
type RawRoomModel struct {
	ID        RawString   `json:"id"`
	Name      RawString   `json:"name"`
	CreatedAt RawDateTime `json:"createdAt"`
}

// RelationsRoom holds the relation data separately
type RelationsRoom struct {
	MediaFiles []MediaFileModel `json:"mediaFiles,omitempty"`
}

func (r RoomModel) MediaFiles() (value []MediaFileModel) {
	if r.RelationsRoom.MediaFiles == nil {
		panic("attempted to access mediaFiles but did not fetch it using the .With() syntax")
	}
	return r.RelationsRoom.MediaFiles
}

// MediaFileModel represents the MediaFile model and is a wrapper for accessing fields and methods
type MediaFileModel struct {
	InnerMediaFile
	RelationsMediaFile
}

// InnerMediaFile holds the actual data
type InnerMediaFile struct {
	ID         string   `json:"id"`
	UploadedAt DateTime `json:"uploadedAt"`
	RoomID     *string  `json:"roomId,omitempty"`
	Message    *string  `json:"message,omitempty"`
	UserName   string   `json:"userName"`
}

// RawMediaFileModel is a struct for MediaFile when used in raw queries
type RawMediaFileModel struct {
	ID         RawString   `json:"id"`
	UploadedAt RawDateTime `json:"uploadedAt"`
	RoomID     *RawString  `json:"roomId,omitempty"`
	Message    *RawString  `json:"message,omitempty"`
	UserName   RawString   `json:"userName"`
}

// RelationsMediaFile holds the relation data separately
type RelationsMediaFile struct {
	Room *RoomModel `json:"room,omitempty"`
}

func (r MediaFileModel) RoomID() (value String, ok bool) {
	if r.InnerMediaFile.RoomID == nil {
		return value, false
	}
	return *r.InnerMediaFile.RoomID, true
}

func (r MediaFileModel) Message() (value String, ok bool) {
	if r.InnerMediaFile.Message == nil {
		return value, false
	}
	return *r.InnerMediaFile.Message, true
}

func (r MediaFileModel) Room() (value *RoomModel, ok bool) {
	if r.RelationsMediaFile.Room == nil {
		return value, false
	}
	return r.RelationsMediaFile.Room, true
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDString

	// Username
	//
	// @required
	Username userQueryUsernameString

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDString struct{}

// Set the required value of ID
func (r userQueryIDString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIDString) Equals(value string) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EqualsIfPresent(value *string) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryIDString) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryUsernameString struct{}

// Set the required value of Username
func (r userQueryUsernameString) Set(value string) userWithPrismaUsernameSetParam {

	return userWithPrismaUsernameSetParam{
		data: builder.Field{
			Name:  "username",
			Value: value,
		},
	}

}

// Set the optional value of Username dynamically
func (r userQueryUsernameString) SetIfPresent(value *String) userWithPrismaUsernameSetParam {
	if value == nil {
		return userWithPrismaUsernameSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUsernameString) Equals(value string) userWithPrismaUsernameEqualsParam {

	return userWithPrismaUsernameEqualsParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) EqualsIfPresent(value *string) userWithPrismaUsernameEqualsParam {
	if value == nil {
		return userWithPrismaUsernameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUsernameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "username",
			Value: direction,
		},
	}
}

func (r userQueryUsernameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "username",
			Value: cursor,
		},
	}
}

func (r userQueryUsernameString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUsernameString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUsernameString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUsernameString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUsernameString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUsernameString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUsernameString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryUsernameString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryUsernameString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryUsernameString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryUsernameString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryUsernameString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryUsernameString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryUsernameString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryUsernameString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryUsernameString) Field() userPrismaFields {
	return userFieldUsername
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParam {

	return userWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryCreatedAtDateTime) Field() userPrismaFields {
	return userFieldCreatedAt
}

// Room acts as a namespaces to access query methods for the Room model
var Room = roomQuery{}

// roomQuery exposes query functions for the room model
type roomQuery struct {

	// ID
	//
	// @required
	ID roomQueryIDString

	// Name
	//
	// @required
	Name roomQueryNameString

	// CreatedAt
	//
	// @required
	CreatedAt roomQueryCreatedAtDateTime

	MediaFiles roomQueryMediaFilesRelations
}

func (roomQuery) Not(params ...RoomWhereParam) roomDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (roomQuery) Or(params ...RoomWhereParam) roomDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (roomQuery) And(params ...RoomWhereParam) roomDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type roomQueryIDString struct{}

// Set the required value of ID
func (r roomQueryIDString) Set(value string) roomSetParam {

	return roomSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r roomQueryIDString) SetIfPresent(value *String) roomSetParam {
	if value == nil {
		return roomSetParam{}
	}

	return r.Set(*value)
}

func (r roomQueryIDString) Equals(value string) roomWithPrismaIDEqualsUniqueParam {

	return roomWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) EqualsIfPresent(value *string) roomWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return roomWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r roomQueryIDString) Order(direction SortOrder) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r roomQueryIDString) Cursor(cursor string) roomCursorParam {
	return roomCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r roomQueryIDString) In(value []string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) InIfPresent(value []string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.In(value)
}

func (r roomQueryIDString) NotIn(value []string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) NotInIfPresent(value []string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.NotIn(value)
}

func (r roomQueryIDString) Lt(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) LtIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Lt(*value)
}

func (r roomQueryIDString) Lte(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) LteIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Lte(*value)
}

func (r roomQueryIDString) Gt(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) GtIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Gt(*value)
}

func (r roomQueryIDString) Gte(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) GteIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Gte(*value)
}

func (r roomQueryIDString) Contains(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) ContainsIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Contains(*value)
}

func (r roomQueryIDString) StartsWith(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) StartsWithIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r roomQueryIDString) EndsWith(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) EndsWithIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r roomQueryIDString) Mode(value QueryMode) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) ModeIfPresent(value *QueryMode) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Mode(*value)
}

func (r roomQueryIDString) Not(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryIDString) NotIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r roomQueryIDString) HasPrefix(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r roomQueryIDString) HasPrefixIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r roomQueryIDString) HasSuffix(value string) roomParamUnique {
	return roomParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r roomQueryIDString) HasSuffixIfPresent(value *string) roomParamUnique {
	if value == nil {
		return roomParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r roomQueryIDString) Field() roomPrismaFields {
	return roomFieldID
}

// base struct
type roomQueryNameString struct{}

// Set the required value of Name
func (r roomQueryNameString) Set(value string) roomWithPrismaNameSetParam {

	return roomWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r roomQueryNameString) SetIfPresent(value *String) roomWithPrismaNameSetParam {
	if value == nil {
		return roomWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r roomQueryNameString) Equals(value string) roomWithPrismaNameEqualsParam {

	return roomWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) EqualsIfPresent(value *string) roomWithPrismaNameEqualsParam {
	if value == nil {
		return roomWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r roomQueryNameString) Order(direction SortOrder) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r roomQueryNameString) Cursor(cursor string) roomCursorParam {
	return roomCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r roomQueryNameString) In(value []string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) InIfPresent(value []string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.In(value)
}

func (r roomQueryNameString) NotIn(value []string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) NotInIfPresent(value []string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.NotIn(value)
}

func (r roomQueryNameString) Lt(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) LtIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Lt(*value)
}

func (r roomQueryNameString) Lte(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) LteIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Lte(*value)
}

func (r roomQueryNameString) Gt(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) GtIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Gt(*value)
}

func (r roomQueryNameString) Gte(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) GteIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Gte(*value)
}

func (r roomQueryNameString) Contains(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) ContainsIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Contains(*value)
}

func (r roomQueryNameString) StartsWith(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) StartsWithIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r roomQueryNameString) EndsWith(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) EndsWithIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r roomQueryNameString) Mode(value QueryMode) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) ModeIfPresent(value *QueryMode) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Mode(*value)
}

func (r roomQueryNameString) Not(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryNameString) NotIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r roomQueryNameString) HasPrefix(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r roomQueryNameString) HasPrefixIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r roomQueryNameString) HasSuffix(value string) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r roomQueryNameString) HasSuffixIfPresent(value *string) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r roomQueryNameString) Field() roomPrismaFields {
	return roomFieldName
}

// base struct
type roomQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r roomQueryCreatedAtDateTime) Set(value DateTime) roomSetParam {

	return roomSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r roomQueryCreatedAtDateTime) SetIfPresent(value *DateTime) roomSetParam {
	if value == nil {
		return roomSetParam{}
	}

	return r.Set(*value)
}

func (r roomQueryCreatedAtDateTime) Equals(value DateTime) roomWithPrismaCreatedAtEqualsParam {

	return roomWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) roomWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return roomWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r roomQueryCreatedAtDateTime) Order(direction SortOrder) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r roomQueryCreatedAtDateTime) Cursor(cursor DateTime) roomCursorParam {
	return roomCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r roomQueryCreatedAtDateTime) In(value []DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) InIfPresent(value []DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.In(value)
}

func (r roomQueryCreatedAtDateTime) NotIn(value []DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.NotIn(value)
}

func (r roomQueryCreatedAtDateTime) Lt(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) LtIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Lt(*value)
}

func (r roomQueryCreatedAtDateTime) Lte(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) LteIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Lte(*value)
}

func (r roomQueryCreatedAtDateTime) Gt(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) GtIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Gt(*value)
}

func (r roomQueryCreatedAtDateTime) Gte(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) GteIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Gte(*value)
}

func (r roomQueryCreatedAtDateTime) Not(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roomQueryCreatedAtDateTime) NotIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r roomQueryCreatedAtDateTime) Before(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r roomQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r roomQueryCreatedAtDateTime) After(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r roomQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r roomQueryCreatedAtDateTime) BeforeEquals(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r roomQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r roomQueryCreatedAtDateTime) AfterEquals(value DateTime) roomDefaultParam {
	return roomDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r roomQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) roomDefaultParam {
	if value == nil {
		return roomDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r roomQueryCreatedAtDateTime) Field() roomPrismaFields {
	return roomFieldCreatedAt
}

// base struct
type roomQueryMediaFilesMediaFile struct{}

type roomQueryMediaFilesRelations struct{}

// Room -> MediaFiles
//
// @relation
// @required
func (roomQueryMediaFilesRelations) Some(
	params ...MediaFileWhereParam,
) roomDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomDefaultParam{
		data: builder.Field{
			Name: "mediaFiles",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Room -> MediaFiles
//
// @relation
// @required
func (roomQueryMediaFilesRelations) Every(
	params ...MediaFileWhereParam,
) roomDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomDefaultParam{
		data: builder.Field{
			Name: "mediaFiles",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Room -> MediaFiles
//
// @relation
// @required
func (roomQueryMediaFilesRelations) None(
	params ...MediaFileWhereParam,
) roomDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomDefaultParam{
		data: builder.Field{
			Name: "mediaFiles",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (roomQueryMediaFilesRelations) Fetch(

	params ...MediaFileWhereParam,

) roomToMediaFilesFindMany {
	var v roomToMediaFilesFindMany

	v.query.Operation = "query"
	v.query.Method = "mediaFiles"
	v.query.Outputs = mediaFileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roomQueryMediaFilesRelations) Link(
	params ...MediaFileWhereParam,
) roomSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roomSetParam{
		data: builder.Field{
			Name: "mediaFiles",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r roomQueryMediaFilesRelations) Unlink(
	params ...MediaFileWhereParam,
) roomSetParam {
	var v roomSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = roomSetParam{
		data: builder.Field{
			Name: "mediaFiles",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r roomQueryMediaFilesMediaFile) Field() roomPrismaFields {
	return roomFieldMediaFiles
}

// MediaFile acts as a namespaces to access query methods for the MediaFile model
var MediaFile = mediaFileQuery{}

// mediaFileQuery exposes query functions for the mediaFile model
type mediaFileQuery struct {

	// ID
	//
	// @required
	ID mediaFileQueryIDString

	// UploadedAt
	//
	// @required
	UploadedAt mediaFileQueryUploadedAtDateTime

	// RoomID
	//
	// @optional
	RoomID mediaFileQueryRoomIDString

	// Message
	//
	// @optional
	Message mediaFileQueryMessageString

	Room mediaFileQueryRoomRelations

	// UserName
	//
	// @required
	UserName mediaFileQueryUserNameString
}

func (mediaFileQuery) Not(params ...MediaFileWhereParam) mediaFileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return mediaFileDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (mediaFileQuery) Or(params ...MediaFileWhereParam) mediaFileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return mediaFileDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (mediaFileQuery) And(params ...MediaFileWhereParam) mediaFileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return mediaFileDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type mediaFileQueryIDString struct{}

// Set the required value of ID
func (r mediaFileQueryIDString) Set(value string) mediaFileSetParam {

	return mediaFileSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r mediaFileQueryIDString) SetIfPresent(value *String) mediaFileSetParam {
	if value == nil {
		return mediaFileSetParam{}
	}

	return r.Set(*value)
}

func (r mediaFileQueryIDString) Equals(value string) mediaFileWithPrismaIDEqualsUniqueParam {

	return mediaFileWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) EqualsIfPresent(value *string) mediaFileWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return mediaFileWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r mediaFileQueryIDString) Order(direction SortOrder) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r mediaFileQueryIDString) Cursor(cursor string) mediaFileCursorParam {
	return mediaFileCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r mediaFileQueryIDString) In(value []string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) InIfPresent(value []string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.In(value)
}

func (r mediaFileQueryIDString) NotIn(value []string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) NotInIfPresent(value []string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.NotIn(value)
}

func (r mediaFileQueryIDString) Lt(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) LtIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Lt(*value)
}

func (r mediaFileQueryIDString) Lte(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) LteIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Lte(*value)
}

func (r mediaFileQueryIDString) Gt(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) GtIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Gt(*value)
}

func (r mediaFileQueryIDString) Gte(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) GteIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Gte(*value)
}

func (r mediaFileQueryIDString) Contains(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) ContainsIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Contains(*value)
}

func (r mediaFileQueryIDString) StartsWith(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) StartsWithIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r mediaFileQueryIDString) EndsWith(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) EndsWithIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r mediaFileQueryIDString) Mode(value QueryMode) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) ModeIfPresent(value *QueryMode) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Mode(*value)
}

func (r mediaFileQueryIDString) Not(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryIDString) NotIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r mediaFileQueryIDString) HasPrefix(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r mediaFileQueryIDString) HasPrefixIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r mediaFileQueryIDString) HasSuffix(value string) mediaFileParamUnique {
	return mediaFileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r mediaFileQueryIDString) HasSuffixIfPresent(value *string) mediaFileParamUnique {
	if value == nil {
		return mediaFileParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r mediaFileQueryIDString) Field() mediaFilePrismaFields {
	return mediaFileFieldID
}

// base struct
type mediaFileQueryUploadedAtDateTime struct{}

// Set the required value of UploadedAt
func (r mediaFileQueryUploadedAtDateTime) Set(value DateTime) mediaFileSetParam {

	return mediaFileSetParam{
		data: builder.Field{
			Name:  "uploadedAt",
			Value: value,
		},
	}

}

// Set the optional value of UploadedAt dynamically
func (r mediaFileQueryUploadedAtDateTime) SetIfPresent(value *DateTime) mediaFileSetParam {
	if value == nil {
		return mediaFileSetParam{}
	}

	return r.Set(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Equals(value DateTime) mediaFileWithPrismaUploadedAtEqualsParam {

	return mediaFileWithPrismaUploadedAtEqualsParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) EqualsIfPresent(value *DateTime) mediaFileWithPrismaUploadedAtEqualsParam {
	if value == nil {
		return mediaFileWithPrismaUploadedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Order(direction SortOrder) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name:  "uploadedAt",
			Value: direction,
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) Cursor(cursor DateTime) mediaFileCursorParam {
	return mediaFileCursorParam{
		data: builder.Field{
			Name:  "uploadedAt",
			Value: cursor,
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) In(value []DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) InIfPresent(value []DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.In(value)
}

func (r mediaFileQueryUploadedAtDateTime) NotIn(value []DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) NotInIfPresent(value []DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r mediaFileQueryUploadedAtDateTime) Lt(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) LtIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Lte(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) LteIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Gt(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) GtIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Gte(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) GteIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Not(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUploadedAtDateTime) NotIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r mediaFileQueryUploadedAtDateTime) Before(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r mediaFileQueryUploadedAtDateTime) BeforeIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r mediaFileQueryUploadedAtDateTime) After(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r mediaFileQueryUploadedAtDateTime) AfterIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r mediaFileQueryUploadedAtDateTime) BeforeEquals(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r mediaFileQueryUploadedAtDateTime) BeforeEqualsIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r mediaFileQueryUploadedAtDateTime) AfterEquals(value DateTime) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "uploadedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r mediaFileQueryUploadedAtDateTime) AfterEqualsIfPresent(value *DateTime) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r mediaFileQueryUploadedAtDateTime) Field() mediaFilePrismaFields {
	return mediaFileFieldUploadedAt
}

// base struct
type mediaFileQueryRoomIDString struct{}

// Set the optional value of RoomID
func (r mediaFileQueryRoomIDString) Set(value string) mediaFileSetParam {

	return mediaFileSetParam{
		data: builder.Field{
			Name:  "roomId",
			Value: value,
		},
	}

}

// Set the optional value of RoomID dynamically
func (r mediaFileQueryRoomIDString) SetIfPresent(value *String) mediaFileSetParam {
	if value == nil {
		return mediaFileSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of RoomID dynamically
func (r mediaFileQueryRoomIDString) SetOptional(value *String) mediaFileSetParam {
	if value == nil {

		var v *string
		return mediaFileSetParam{
			data: builder.Field{
				Name:  "roomId",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r mediaFileQueryRoomIDString) Equals(value string) mediaFileWithPrismaRoomIDEqualsParam {

	return mediaFileWithPrismaRoomIDEqualsParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) EqualsIfPresent(value *string) mediaFileWithPrismaRoomIDEqualsParam {
	if value == nil {
		return mediaFileWithPrismaRoomIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r mediaFileQueryRoomIDString) EqualsOptional(value *String) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) IsNull() mediaFileDefaultParam {
	var str *string = nil
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) Order(direction SortOrder) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name:  "roomId",
			Value: direction,
		},
	}
}

func (r mediaFileQueryRoomIDString) Cursor(cursor string) mediaFileCursorParam {
	return mediaFileCursorParam{
		data: builder.Field{
			Name:  "roomId",
			Value: cursor,
		},
	}
}

func (r mediaFileQueryRoomIDString) In(value []string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) InIfPresent(value []string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.In(value)
}

func (r mediaFileQueryRoomIDString) NotIn(value []string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) NotInIfPresent(value []string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r mediaFileQueryRoomIDString) Lt(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) LtIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r mediaFileQueryRoomIDString) Lte(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) LteIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r mediaFileQueryRoomIDString) Gt(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) GtIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r mediaFileQueryRoomIDString) Gte(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) GteIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r mediaFileQueryRoomIDString) Contains(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) ContainsIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r mediaFileQueryRoomIDString) StartsWith(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) StartsWithIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r mediaFileQueryRoomIDString) EndsWith(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) EndsWithIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r mediaFileQueryRoomIDString) Mode(value QueryMode) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) ModeIfPresent(value *QueryMode) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r mediaFileQueryRoomIDString) Not(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryRoomIDString) NotIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r mediaFileQueryRoomIDString) HasPrefix(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r mediaFileQueryRoomIDString) HasPrefixIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r mediaFileQueryRoomIDString) HasSuffix(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "roomId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r mediaFileQueryRoomIDString) HasSuffixIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r mediaFileQueryRoomIDString) Field() mediaFilePrismaFields {
	return mediaFileFieldRoomID
}

// base struct
type mediaFileQueryMessageString struct{}

// Set the optional value of Message
func (r mediaFileQueryMessageString) Set(value string) mediaFileSetParam {

	return mediaFileSetParam{
		data: builder.Field{
			Name:  "message",
			Value: value,
		},
	}

}

// Set the optional value of Message dynamically
func (r mediaFileQueryMessageString) SetIfPresent(value *String) mediaFileSetParam {
	if value == nil {
		return mediaFileSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Message dynamically
func (r mediaFileQueryMessageString) SetOptional(value *String) mediaFileSetParam {
	if value == nil {

		var v *string
		return mediaFileSetParam{
			data: builder.Field{
				Name:  "message",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r mediaFileQueryMessageString) Equals(value string) mediaFileWithPrismaMessageEqualsParam {

	return mediaFileWithPrismaMessageEqualsParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) EqualsIfPresent(value *string) mediaFileWithPrismaMessageEqualsParam {
	if value == nil {
		return mediaFileWithPrismaMessageEqualsParam{}
	}
	return r.Equals(*value)
}

func (r mediaFileQueryMessageString) EqualsOptional(value *String) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) IsNull() mediaFileDefaultParam {
	var str *string = nil
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) Order(direction SortOrder) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name:  "message",
			Value: direction,
		},
	}
}

func (r mediaFileQueryMessageString) Cursor(cursor string) mediaFileCursorParam {
	return mediaFileCursorParam{
		data: builder.Field{
			Name:  "message",
			Value: cursor,
		},
	}
}

func (r mediaFileQueryMessageString) In(value []string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) InIfPresent(value []string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.In(value)
}

func (r mediaFileQueryMessageString) NotIn(value []string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) NotInIfPresent(value []string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r mediaFileQueryMessageString) Lt(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) LtIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r mediaFileQueryMessageString) Lte(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) LteIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r mediaFileQueryMessageString) Gt(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) GtIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r mediaFileQueryMessageString) Gte(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) GteIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r mediaFileQueryMessageString) Contains(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) ContainsIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r mediaFileQueryMessageString) StartsWith(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) StartsWithIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r mediaFileQueryMessageString) EndsWith(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) EndsWithIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r mediaFileQueryMessageString) Mode(value QueryMode) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) ModeIfPresent(value *QueryMode) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r mediaFileQueryMessageString) Not(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryMessageString) NotIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r mediaFileQueryMessageString) HasPrefix(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r mediaFileQueryMessageString) HasPrefixIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r mediaFileQueryMessageString) HasSuffix(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r mediaFileQueryMessageString) HasSuffixIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r mediaFileQueryMessageString) Field() mediaFilePrismaFields {
	return mediaFileFieldMessage
}

// base struct
type mediaFileQueryRoomRoom struct{}

type mediaFileQueryRoomRelations struct{}

// MediaFile -> Room
//
// @relation
// @optional
func (mediaFileQueryRoomRelations) Where(
	params ...RoomWhereParam,
) mediaFileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "room",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (mediaFileQueryRoomRelations) Fetch() mediaFileToRoomFindUnique {
	var v mediaFileToRoomFindUnique

	v.query.Operation = "query"
	v.query.Method = "room"
	v.query.Outputs = roomOutput

	return v
}

func (r mediaFileQueryRoomRelations) Link(
	params RoomWhereParam,
) mediaFileSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return mediaFileSetParam{}
	}

	fields = append(fields, f)

	return mediaFileSetParam{
		data: builder.Field{
			Name: "room",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r mediaFileQueryRoomRelations) Unlink() mediaFileSetParam {
	var v mediaFileSetParam

	v = mediaFileSetParam{
		data: builder.Field{
			Name: "room",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r mediaFileQueryRoomRoom) Field() mediaFilePrismaFields {
	return mediaFileFieldRoom
}

// base struct
type mediaFileQueryUserNameString struct{}

// Set the required value of UserName
func (r mediaFileQueryUserNameString) Set(value string) mediaFileSetParam {

	return mediaFileSetParam{
		data: builder.Field{
			Name:  "userName",
			Value: value,
		},
	}

}

// Set the optional value of UserName dynamically
func (r mediaFileQueryUserNameString) SetIfPresent(value *String) mediaFileSetParam {
	if value == nil {
		return mediaFileSetParam{}
	}

	return r.Set(*value)
}

func (r mediaFileQueryUserNameString) Equals(value string) mediaFileWithPrismaUserNameEqualsParam {

	return mediaFileWithPrismaUserNameEqualsParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) EqualsIfPresent(value *string) mediaFileWithPrismaUserNameEqualsParam {
	if value == nil {
		return mediaFileWithPrismaUserNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r mediaFileQueryUserNameString) Order(direction SortOrder) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name:  "userName",
			Value: direction,
		},
	}
}

func (r mediaFileQueryUserNameString) Cursor(cursor string) mediaFileCursorParam {
	return mediaFileCursorParam{
		data: builder.Field{
			Name:  "userName",
			Value: cursor,
		},
	}
}

func (r mediaFileQueryUserNameString) In(value []string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) InIfPresent(value []string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.In(value)
}

func (r mediaFileQueryUserNameString) NotIn(value []string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) NotInIfPresent(value []string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r mediaFileQueryUserNameString) Lt(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) LtIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r mediaFileQueryUserNameString) Lte(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) LteIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r mediaFileQueryUserNameString) Gt(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) GtIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r mediaFileQueryUserNameString) Gte(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) GteIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r mediaFileQueryUserNameString) Contains(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) ContainsIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r mediaFileQueryUserNameString) StartsWith(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) StartsWithIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r mediaFileQueryUserNameString) EndsWith(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) EndsWithIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r mediaFileQueryUserNameString) Mode(value QueryMode) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) ModeIfPresent(value *QueryMode) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r mediaFileQueryUserNameString) Not(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r mediaFileQueryUserNameString) NotIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r mediaFileQueryUserNameString) HasPrefix(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r mediaFileQueryUserNameString) HasPrefixIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r mediaFileQueryUserNameString) HasSuffix(value string) mediaFileDefaultParam {
	return mediaFileDefaultParam{
		data: builder.Field{
			Name: "userName",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r mediaFileQueryUserNameString) HasSuffixIfPresent(value *string) mediaFileDefaultParam {
	if value == nil {
		return mediaFileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r mediaFileQueryUserNameString) Field() mediaFilePrismaFields {
	return mediaFileFieldUserName
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "username"},
	{Name: "createdAt"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaUsernameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	usernameField()
}

type UserWithPrismaUsernameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	usernameField()
}

type userWithPrismaUsernameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUsernameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUsernameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUsernameSetParam) userModel() {}

func (p userWithPrismaUsernameSetParam) usernameField() {}

type UserWithPrismaUsernameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	usernameField()
}

type userWithPrismaUsernameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUsernameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUsernameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUsernameEqualsParam) userModel() {}

func (p userWithPrismaUsernameEqualsParam) usernameField() {}

func (userWithPrismaUsernameSetParam) settable()  {}
func (userWithPrismaUsernameEqualsParam) equals() {}

type userWithPrismaUsernameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUsernameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUsernameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUsernameEqualsUniqueParam) userModel()     {}
func (p userWithPrismaUsernameEqualsUniqueParam) usernameField() {}

func (userWithPrismaUsernameEqualsUniqueParam) unique() {}
func (userWithPrismaUsernameEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type UserWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParam) userModel() {}

func (p userWithPrismaCreatedAtSetParam) createdAtField() {}

type UserWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParam) userModel() {}

func (p userWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userWithPrismaCreatedAtSetParam) settable()  {}
func (userWithPrismaCreatedAtEqualsParam) equals() {}

type userWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (userWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type roomActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var roomOutput = []builder.Output{
	{Name: "id"},
	{Name: "name"},
	{Name: "createdAt"},
}

type RoomRelationWith interface {
	getQuery() builder.Query
	with()
	roomRelation()
}

type RoomWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
}

type roomDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomDefaultParam) field() builder.Field {
	return p.data
}

func (p roomDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p roomDefaultParam) roomModel() {}

type RoomOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
}

type roomOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomOrderByParam) field() builder.Field {
	return p.data
}

func (p roomOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p roomOrderByParam) roomModel() {}

type RoomCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	isCursor()
}

type roomCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomCursorParam) field() builder.Field {
	return p.data
}

func (p roomCursorParam) isCursor() {}

func (p roomCursorParam) getQuery() builder.Query {
	return p.query
}

func (p roomCursorParam) roomModel() {}

type RoomParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	roomModel()
}

type roomParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p roomParamUnique) roomModel() {}

func (roomParamUnique) unique() {}

func (p roomParamUnique) field() builder.Field {
	return p.data
}

func (p roomParamUnique) getQuery() builder.Query {
	return p.query
}

type RoomEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roomModel()
}

type roomEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomEqualsParam) roomModel() {}

func (roomEqualsParam) equals() {}

func (p roomEqualsParam) field() builder.Field {
	return p.data
}

func (p roomEqualsParam) getQuery() builder.Query {
	return p.query
}

type RoomEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	roomModel()
}

type roomEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomEqualsUniqueParam) roomModel() {}

func (roomEqualsUniqueParam) unique() {}
func (roomEqualsUniqueParam) equals() {}

func (p roomEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roomEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type RoomSetParam interface {
	field() builder.Field
	settable()
	roomModel()
}

type roomSetParam struct {
	data builder.Field
}

func (roomSetParam) settable() {}

func (p roomSetParam) field() builder.Field {
	return p.data
}

func (p roomSetParam) roomModel() {}

type RoomWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roomModel()
	idField()
}

type RoomWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	idField()
}

type roomWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaIDSetParam) roomModel() {}

func (p roomWithPrismaIDSetParam) idField() {}

type RoomWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	idField()
}

type roomWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaIDEqualsParam) roomModel() {}

func (p roomWithPrismaIDEqualsParam) idField() {}

func (roomWithPrismaIDSetParam) settable()  {}
func (roomWithPrismaIDEqualsParam) equals() {}

type roomWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaIDEqualsUniqueParam) roomModel() {}
func (p roomWithPrismaIDEqualsUniqueParam) idField()   {}

func (roomWithPrismaIDEqualsUniqueParam) unique() {}
func (roomWithPrismaIDEqualsUniqueParam) equals() {}

type RoomWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roomModel()
	nameField()
}

type RoomWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	nameField()
}

type roomWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaNameSetParam) roomModel() {}

func (p roomWithPrismaNameSetParam) nameField() {}

type RoomWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	nameField()
}

type roomWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaNameEqualsParam) roomModel() {}

func (p roomWithPrismaNameEqualsParam) nameField() {}

func (roomWithPrismaNameSetParam) settable()  {}
func (roomWithPrismaNameEqualsParam) equals() {}

type roomWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaNameEqualsUniqueParam) roomModel() {}
func (p roomWithPrismaNameEqualsUniqueParam) nameField() {}

func (roomWithPrismaNameEqualsUniqueParam) unique() {}
func (roomWithPrismaNameEqualsUniqueParam) equals() {}

type RoomWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roomModel()
	createdAtField()
}

type RoomWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	createdAtField()
}

type roomWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaCreatedAtSetParam) roomModel() {}

func (p roomWithPrismaCreatedAtSetParam) createdAtField() {}

type RoomWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	createdAtField()
}

type roomWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaCreatedAtEqualsParam) roomModel() {}

func (p roomWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (roomWithPrismaCreatedAtSetParam) settable()  {}
func (roomWithPrismaCreatedAtEqualsParam) equals() {}

type roomWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaCreatedAtEqualsUniqueParam) roomModel()      {}
func (p roomWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (roomWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (roomWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type RoomWithPrismaMediaFilesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roomModel()
	mediaFilesField()
}

type RoomWithPrismaMediaFilesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	mediaFilesField()
}

type roomWithPrismaMediaFilesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaMediaFilesSetParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaMediaFilesSetParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaMediaFilesSetParam) roomModel() {}

func (p roomWithPrismaMediaFilesSetParam) mediaFilesField() {}

type RoomWithPrismaMediaFilesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roomModel()
	mediaFilesField()
}

type roomWithPrismaMediaFilesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaMediaFilesEqualsParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaMediaFilesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaMediaFilesEqualsParam) roomModel() {}

func (p roomWithPrismaMediaFilesEqualsParam) mediaFilesField() {}

func (roomWithPrismaMediaFilesSetParam) settable()  {}
func (roomWithPrismaMediaFilesEqualsParam) equals() {}

type roomWithPrismaMediaFilesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roomWithPrismaMediaFilesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roomWithPrismaMediaFilesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roomWithPrismaMediaFilesEqualsUniqueParam) roomModel()       {}
func (p roomWithPrismaMediaFilesEqualsUniqueParam) mediaFilesField() {}

func (roomWithPrismaMediaFilesEqualsUniqueParam) unique() {}
func (roomWithPrismaMediaFilesEqualsUniqueParam) equals() {}

type mediaFileActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var mediaFileOutput = []builder.Output{
	{Name: "id"},
	{Name: "uploadedAt"},
	{Name: "roomId"},
	{Name: "message"},
	{Name: "userName"},
}

type MediaFileRelationWith interface {
	getQuery() builder.Query
	with()
	mediaFileRelation()
}

type MediaFileWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
}

type mediaFileDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileDefaultParam) field() builder.Field {
	return p.data
}

func (p mediaFileDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileDefaultParam) mediaFileModel() {}

type MediaFileOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
}

type mediaFileOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileOrderByParam) field() builder.Field {
	return p.data
}

func (p mediaFileOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileOrderByParam) mediaFileModel() {}

type MediaFileCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	isCursor()
}

type mediaFileCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileCursorParam) field() builder.Field {
	return p.data
}

func (p mediaFileCursorParam) isCursor() {}

func (p mediaFileCursorParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileCursorParam) mediaFileModel() {}

type MediaFileParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	mediaFileModel()
}

type mediaFileParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileParamUnique) mediaFileModel() {}

func (mediaFileParamUnique) unique() {}

func (p mediaFileParamUnique) field() builder.Field {
	return p.data
}

func (p mediaFileParamUnique) getQuery() builder.Query {
	return p.query
}

type MediaFileEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
}

type mediaFileEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileEqualsParam) mediaFileModel() {}

func (mediaFileEqualsParam) equals() {}

func (p mediaFileEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileEqualsParam) getQuery() builder.Query {
	return p.query
}

type MediaFileEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	mediaFileModel()
}

type mediaFileEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileEqualsUniqueParam) mediaFileModel() {}

func (mediaFileEqualsUniqueParam) unique() {}
func (mediaFileEqualsUniqueParam) equals() {}

func (p mediaFileEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type MediaFileSetParam interface {
	field() builder.Field
	settable()
	mediaFileModel()
}

type mediaFileSetParam struct {
	data builder.Field
}

func (mediaFileSetParam) settable() {}

func (p mediaFileSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileSetParam) mediaFileModel() {}

type MediaFileWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
	idField()
}

type MediaFileWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	idField()
}

type mediaFileWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaIDSetParam) mediaFileModel() {}

func (p mediaFileWithPrismaIDSetParam) idField() {}

type MediaFileWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	idField()
}

type mediaFileWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaIDEqualsParam) mediaFileModel() {}

func (p mediaFileWithPrismaIDEqualsParam) idField() {}

func (mediaFileWithPrismaIDSetParam) settable()  {}
func (mediaFileWithPrismaIDEqualsParam) equals() {}

type mediaFileWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaIDEqualsUniqueParam) mediaFileModel() {}
func (p mediaFileWithPrismaIDEqualsUniqueParam) idField()        {}

func (mediaFileWithPrismaIDEqualsUniqueParam) unique() {}
func (mediaFileWithPrismaIDEqualsUniqueParam) equals() {}

type MediaFileWithPrismaUploadedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
	uploadedAtField()
}

type MediaFileWithPrismaUploadedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	uploadedAtField()
}

type mediaFileWithPrismaUploadedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaUploadedAtSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaUploadedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaUploadedAtSetParam) mediaFileModel() {}

func (p mediaFileWithPrismaUploadedAtSetParam) uploadedAtField() {}

type MediaFileWithPrismaUploadedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	uploadedAtField()
}

type mediaFileWithPrismaUploadedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaUploadedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaUploadedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaUploadedAtEqualsParam) mediaFileModel() {}

func (p mediaFileWithPrismaUploadedAtEqualsParam) uploadedAtField() {}

func (mediaFileWithPrismaUploadedAtSetParam) settable()  {}
func (mediaFileWithPrismaUploadedAtEqualsParam) equals() {}

type mediaFileWithPrismaUploadedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaUploadedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaUploadedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaUploadedAtEqualsUniqueParam) mediaFileModel()  {}
func (p mediaFileWithPrismaUploadedAtEqualsUniqueParam) uploadedAtField() {}

func (mediaFileWithPrismaUploadedAtEqualsUniqueParam) unique() {}
func (mediaFileWithPrismaUploadedAtEqualsUniqueParam) equals() {}

type MediaFileWithPrismaRoomIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
	roomIDField()
}

type MediaFileWithPrismaRoomIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	roomIDField()
}

type mediaFileWithPrismaRoomIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaRoomIDSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaRoomIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaRoomIDSetParam) mediaFileModel() {}

func (p mediaFileWithPrismaRoomIDSetParam) roomIDField() {}

type MediaFileWithPrismaRoomIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	roomIDField()
}

type mediaFileWithPrismaRoomIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaRoomIDEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaRoomIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaRoomIDEqualsParam) mediaFileModel() {}

func (p mediaFileWithPrismaRoomIDEqualsParam) roomIDField() {}

func (mediaFileWithPrismaRoomIDSetParam) settable()  {}
func (mediaFileWithPrismaRoomIDEqualsParam) equals() {}

type mediaFileWithPrismaRoomIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaRoomIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaRoomIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaRoomIDEqualsUniqueParam) mediaFileModel() {}
func (p mediaFileWithPrismaRoomIDEqualsUniqueParam) roomIDField()    {}

func (mediaFileWithPrismaRoomIDEqualsUniqueParam) unique() {}
func (mediaFileWithPrismaRoomIDEqualsUniqueParam) equals() {}

type MediaFileWithPrismaMessageEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
	messageField()
}

type MediaFileWithPrismaMessageSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	messageField()
}

type mediaFileWithPrismaMessageSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaMessageSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaMessageSetParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaMessageSetParam) mediaFileModel() {}

func (p mediaFileWithPrismaMessageSetParam) messageField() {}

type MediaFileWithPrismaMessageWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	messageField()
}

type mediaFileWithPrismaMessageEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaMessageEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaMessageEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaMessageEqualsParam) mediaFileModel() {}

func (p mediaFileWithPrismaMessageEqualsParam) messageField() {}

func (mediaFileWithPrismaMessageSetParam) settable()  {}
func (mediaFileWithPrismaMessageEqualsParam) equals() {}

type mediaFileWithPrismaMessageEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaMessageEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaMessageEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaMessageEqualsUniqueParam) mediaFileModel() {}
func (p mediaFileWithPrismaMessageEqualsUniqueParam) messageField()   {}

func (mediaFileWithPrismaMessageEqualsUniqueParam) unique() {}
func (mediaFileWithPrismaMessageEqualsUniqueParam) equals() {}

type MediaFileWithPrismaRoomEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
	roomField()
}

type MediaFileWithPrismaRoomSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	roomField()
}

type mediaFileWithPrismaRoomSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaRoomSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaRoomSetParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaRoomSetParam) mediaFileModel() {}

func (p mediaFileWithPrismaRoomSetParam) roomField() {}

type MediaFileWithPrismaRoomWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	roomField()
}

type mediaFileWithPrismaRoomEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaRoomEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaRoomEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaRoomEqualsParam) mediaFileModel() {}

func (p mediaFileWithPrismaRoomEqualsParam) roomField() {}

func (mediaFileWithPrismaRoomSetParam) settable()  {}
func (mediaFileWithPrismaRoomEqualsParam) equals() {}

type mediaFileWithPrismaRoomEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaRoomEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaRoomEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaRoomEqualsUniqueParam) mediaFileModel() {}
func (p mediaFileWithPrismaRoomEqualsUniqueParam) roomField()      {}

func (mediaFileWithPrismaRoomEqualsUniqueParam) unique() {}
func (mediaFileWithPrismaRoomEqualsUniqueParam) equals() {}

type MediaFileWithPrismaUserNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	mediaFileModel()
	userNameField()
}

type MediaFileWithPrismaUserNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	userNameField()
}

type mediaFileWithPrismaUserNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaUserNameSetParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaUserNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaUserNameSetParam) mediaFileModel() {}

func (p mediaFileWithPrismaUserNameSetParam) userNameField() {}

type MediaFileWithPrismaUserNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	mediaFileModel()
	userNameField()
}

type mediaFileWithPrismaUserNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaUserNameEqualsParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaUserNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaUserNameEqualsParam) mediaFileModel() {}

func (p mediaFileWithPrismaUserNameEqualsParam) userNameField() {}

func (mediaFileWithPrismaUserNameSetParam) settable()  {}
func (mediaFileWithPrismaUserNameEqualsParam) equals() {}

type mediaFileWithPrismaUserNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p mediaFileWithPrismaUserNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p mediaFileWithPrismaUserNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p mediaFileWithPrismaUserNameEqualsUniqueParam) mediaFileModel() {}
func (p mediaFileWithPrismaUserNameEqualsUniqueParam) userNameField()  {}

func (mediaFileWithPrismaUserNameEqualsUniqueParam) unique() {}
func (mediaFileWithPrismaUserNameEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_username UserWithPrismaUsernameSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _username.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single room.
func (r roomActions) CreateOne(
	_name RoomWithPrismaNameSetParam,

	optional ...RoomSetParam,
) roomCreateOne {
	var v roomCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Room"
	v.query.Outputs = roomOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r roomCreateOne) With(params ...RoomRelationWith) roomCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type roomCreateOne struct {
	query builder.Query
}

func (p roomCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p roomCreateOne) roomModel() {}

func (r roomCreateOne) Exec(ctx context.Context) (*RoomModel, error) {
	var v RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomCreateOne) Tx() RoomUniqueTxResult {
	v := newRoomUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single mediaFile.
func (r mediaFileActions) CreateOne(

	optional ...MediaFileSetParam,
) mediaFileCreateOne {
	var v mediaFileCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "MediaFile"
	v.query.Outputs = mediaFileOutput

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r mediaFileCreateOne) With(params ...MediaFileRelationWith) mediaFileCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type mediaFileCreateOne struct {
	query builder.Query
}

func (p mediaFileCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p mediaFileCreateOne) mediaFileModel() {}

func (r mediaFileCreateOne) Exec(ctx context.Context) (*MediaFileModel, error) {
	var v MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileCreateOne) Tx() MediaFileUniqueTxResult {
	v := newMediaFileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Select(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Omit(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) Select(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) Omit(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) Select(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) Omit(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roomToMediaFilesFindUnique struct {
	query builder.Query
}

func (r roomToMediaFilesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesFindUnique) with()         {}
func (r roomToMediaFilesFindUnique) roomModel()    {}
func (r roomToMediaFilesFindUnique) roomRelation() {}

func (r roomToMediaFilesFindUnique) With(params ...MediaFileRelationWith) roomToMediaFilesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roomToMediaFilesFindUnique) Select(params ...roomPrismaFields) roomToMediaFilesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roomToMediaFilesFindUnique) Omit(params ...roomPrismaFields) roomToMediaFilesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roomOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roomToMediaFilesFindUnique) Exec(ctx context.Context) (
	*RoomModel,
	error,
) {
	var v *RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roomToMediaFilesFindUnique) ExecInner(ctx context.Context) (
	*InnerRoom,
	error,
) {
	var v *InnerRoom
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roomToMediaFilesFindUnique) Update(params ...RoomSetParam) roomToMediaFilesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Room"

	var v roomToMediaFilesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roomToMediaFilesUpdateUnique struct {
	query builder.Query
}

func (r roomToMediaFilesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesUpdateUnique) roomModel() {}

func (r roomToMediaFilesUpdateUnique) Exec(ctx context.Context) (*RoomModel, error) {
	var v RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomToMediaFilesUpdateUnique) Tx() RoomUniqueTxResult {
	v := newRoomUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roomToMediaFilesFindUnique) Delete() roomToMediaFilesDeleteUnique {
	var v roomToMediaFilesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Room"

	return v
}

type roomToMediaFilesDeleteUnique struct {
	query builder.Query
}

func (r roomToMediaFilesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p roomToMediaFilesDeleteUnique) roomModel() {}

func (r roomToMediaFilesDeleteUnique) Exec(ctx context.Context) (*RoomModel, error) {
	var v RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomToMediaFilesDeleteUnique) Tx() RoomUniqueTxResult {
	v := newRoomUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roomToMediaFilesFindFirst struct {
	query builder.Query
}

func (r roomToMediaFilesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesFindFirst) with()         {}
func (r roomToMediaFilesFindFirst) roomModel()    {}
func (r roomToMediaFilesFindFirst) roomRelation() {}

func (r roomToMediaFilesFindFirst) With(params ...MediaFileRelationWith) roomToMediaFilesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roomToMediaFilesFindFirst) Select(params ...roomPrismaFields) roomToMediaFilesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roomToMediaFilesFindFirst) Omit(params ...roomPrismaFields) roomToMediaFilesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roomOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roomToMediaFilesFindFirst) OrderBy(params ...MediaFileOrderByParam) roomToMediaFilesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roomToMediaFilesFindFirst) Skip(count int) roomToMediaFilesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roomToMediaFilesFindFirst) Take(count int) roomToMediaFilesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roomToMediaFilesFindFirst) Cursor(cursor RoomCursorParam) roomToMediaFilesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roomToMediaFilesFindFirst) Exec(ctx context.Context) (
	*RoomModel,
	error,
) {
	var v *RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roomToMediaFilesFindFirst) ExecInner(ctx context.Context) (
	*InnerRoom,
	error,
) {
	var v *InnerRoom
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type roomToMediaFilesFindMany struct {
	query builder.Query
}

func (r roomToMediaFilesFindMany) getQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesFindMany) with()         {}
func (r roomToMediaFilesFindMany) roomModel()    {}
func (r roomToMediaFilesFindMany) roomRelation() {}

func (r roomToMediaFilesFindMany) With(params ...MediaFileRelationWith) roomToMediaFilesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roomToMediaFilesFindMany) Select(params ...roomPrismaFields) roomToMediaFilesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roomToMediaFilesFindMany) Omit(params ...roomPrismaFields) roomToMediaFilesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roomOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roomToMediaFilesFindMany) OrderBy(params ...MediaFileOrderByParam) roomToMediaFilesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roomToMediaFilesFindMany) Skip(count int) roomToMediaFilesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roomToMediaFilesFindMany) Take(count int) roomToMediaFilesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roomToMediaFilesFindMany) Cursor(cursor RoomCursorParam) roomToMediaFilesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roomToMediaFilesFindMany) Exec(ctx context.Context) (
	[]RoomModel,
	error,
) {
	var v []RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roomToMediaFilesFindMany) ExecInner(ctx context.Context) (
	[]InnerRoom,
	error,
) {
	var v []InnerRoom
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roomToMediaFilesFindMany) Update(params ...RoomSetParam) roomToMediaFilesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Room"

	r.query.Outputs = countOutput

	var v roomToMediaFilesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roomToMediaFilesUpdateMany struct {
	query builder.Query
}

func (r roomToMediaFilesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roomToMediaFilesUpdateMany) roomModel() {}

func (r roomToMediaFilesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomToMediaFilesUpdateMany) Tx() RoomManyTxResult {
	v := newRoomManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roomToMediaFilesFindMany) Delete() roomToMediaFilesDeleteMany {
	var v roomToMediaFilesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Room"

	v.query.Outputs = countOutput

	return v
}

type roomToMediaFilesDeleteMany struct {
	query builder.Query
}

func (r roomToMediaFilesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p roomToMediaFilesDeleteMany) roomModel() {}

func (r roomToMediaFilesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomToMediaFilesDeleteMany) Tx() RoomManyTxResult {
	v := newRoomManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roomFindUnique struct {
	query builder.Query
}

func (r roomFindUnique) getQuery() builder.Query {
	return r.query
}

func (r roomFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roomFindUnique) with()         {}
func (r roomFindUnique) roomModel()    {}
func (r roomFindUnique) roomRelation() {}

func (r roomActions) FindUnique(
	params RoomEqualsUniqueWhereParam,
) roomFindUnique {
	var v roomFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Room"
	v.query.Outputs = roomOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r roomFindUnique) With(params ...RoomRelationWith) roomFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roomFindUnique) Select(params ...roomPrismaFields) roomFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roomFindUnique) Omit(params ...roomPrismaFields) roomFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roomOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roomFindUnique) Exec(ctx context.Context) (
	*RoomModel,
	error,
) {
	var v *RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roomFindUnique) ExecInner(ctx context.Context) (
	*InnerRoom,
	error,
) {
	var v *InnerRoom
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roomFindUnique) Update(params ...RoomSetParam) roomUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Room"

	var v roomUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roomUpdateUnique struct {
	query builder.Query
}

func (r roomUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roomUpdateUnique) roomModel() {}

func (r roomUpdateUnique) Exec(ctx context.Context) (*RoomModel, error) {
	var v RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomUpdateUnique) Tx() RoomUniqueTxResult {
	v := newRoomUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roomFindUnique) Delete() roomDeleteUnique {
	var v roomDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Room"

	return v
}

type roomDeleteUnique struct {
	query builder.Query
}

func (r roomDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p roomDeleteUnique) roomModel() {}

func (r roomDeleteUnique) Exec(ctx context.Context) (*RoomModel, error) {
	var v RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomDeleteUnique) Tx() RoomUniqueTxResult {
	v := newRoomUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roomFindFirst struct {
	query builder.Query
}

func (r roomFindFirst) getQuery() builder.Query {
	return r.query
}

func (r roomFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r roomFindFirst) with()         {}
func (r roomFindFirst) roomModel()    {}
func (r roomFindFirst) roomRelation() {}

func (r roomActions) FindFirst(
	params ...RoomWhereParam,
) roomFindFirst {
	var v roomFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Room"
	v.query.Outputs = roomOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roomFindFirst) With(params ...RoomRelationWith) roomFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roomFindFirst) Select(params ...roomPrismaFields) roomFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roomFindFirst) Omit(params ...roomPrismaFields) roomFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roomOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roomFindFirst) OrderBy(params ...RoomOrderByParam) roomFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roomFindFirst) Skip(count int) roomFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roomFindFirst) Take(count int) roomFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roomFindFirst) Cursor(cursor RoomCursorParam) roomFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roomFindFirst) Exec(ctx context.Context) (
	*RoomModel,
	error,
) {
	var v *RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roomFindFirst) ExecInner(ctx context.Context) (
	*InnerRoom,
	error,
) {
	var v *InnerRoom
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type roomFindMany struct {
	query builder.Query
}

func (r roomFindMany) getQuery() builder.Query {
	return r.query
}

func (r roomFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roomFindMany) with()         {}
func (r roomFindMany) roomModel()    {}
func (r roomFindMany) roomRelation() {}

func (r roomActions) FindMany(
	params ...RoomWhereParam,
) roomFindMany {
	var v roomFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Room"
	v.query.Outputs = roomOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roomFindMany) With(params ...RoomRelationWith) roomFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roomFindMany) Select(params ...roomPrismaFields) roomFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roomFindMany) Omit(params ...roomPrismaFields) roomFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roomOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roomFindMany) OrderBy(params ...RoomOrderByParam) roomFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roomFindMany) Skip(count int) roomFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roomFindMany) Take(count int) roomFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roomFindMany) Cursor(cursor RoomCursorParam) roomFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roomFindMany) Exec(ctx context.Context) (
	[]RoomModel,
	error,
) {
	var v []RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roomFindMany) ExecInner(ctx context.Context) (
	[]InnerRoom,
	error,
) {
	var v []InnerRoom
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roomFindMany) Update(params ...RoomSetParam) roomUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Room"

	r.query.Outputs = countOutput

	var v roomUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roomUpdateMany struct {
	query builder.Query
}

func (r roomUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roomUpdateMany) roomModel() {}

func (r roomUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomUpdateMany) Tx() RoomManyTxResult {
	v := newRoomManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roomFindMany) Delete() roomDeleteMany {
	var v roomDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Room"

	v.query.Outputs = countOutput

	return v
}

type roomDeleteMany struct {
	query builder.Query
}

func (r roomDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p roomDeleteMany) roomModel() {}

func (r roomDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomDeleteMany) Tx() RoomManyTxResult {
	v := newRoomManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type mediaFileToRoomFindUnique struct {
	query builder.Query
}

func (r mediaFileToRoomFindUnique) getQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomFindUnique) with()              {}
func (r mediaFileToRoomFindUnique) mediaFileModel()    {}
func (r mediaFileToRoomFindUnique) mediaFileRelation() {}

func (r mediaFileToRoomFindUnique) With(params ...RoomRelationWith) mediaFileToRoomFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r mediaFileToRoomFindUnique) Select(params ...mediaFilePrismaFields) mediaFileToRoomFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileToRoomFindUnique) Omit(params ...mediaFilePrismaFields) mediaFileToRoomFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range mediaFileOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileToRoomFindUnique) Exec(ctx context.Context) (
	*MediaFileModel,
	error,
) {
	var v *MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r mediaFileToRoomFindUnique) ExecInner(ctx context.Context) (
	*InnerMediaFile,
	error,
) {
	var v *InnerMediaFile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r mediaFileToRoomFindUnique) Update(params ...MediaFileSetParam) mediaFileToRoomUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MediaFile"

	var v mediaFileToRoomUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type mediaFileToRoomUpdateUnique struct {
	query builder.Query
}

func (r mediaFileToRoomUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomUpdateUnique) mediaFileModel() {}

func (r mediaFileToRoomUpdateUnique) Exec(ctx context.Context) (*MediaFileModel, error) {
	var v MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileToRoomUpdateUnique) Tx() MediaFileUniqueTxResult {
	v := newMediaFileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r mediaFileToRoomFindUnique) Delete() mediaFileToRoomDeleteUnique {
	var v mediaFileToRoomDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MediaFile"

	return v
}

type mediaFileToRoomDeleteUnique struct {
	query builder.Query
}

func (r mediaFileToRoomDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p mediaFileToRoomDeleteUnique) mediaFileModel() {}

func (r mediaFileToRoomDeleteUnique) Exec(ctx context.Context) (*MediaFileModel, error) {
	var v MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileToRoomDeleteUnique) Tx() MediaFileUniqueTxResult {
	v := newMediaFileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type mediaFileToRoomFindFirst struct {
	query builder.Query
}

func (r mediaFileToRoomFindFirst) getQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomFindFirst) with()              {}
func (r mediaFileToRoomFindFirst) mediaFileModel()    {}
func (r mediaFileToRoomFindFirst) mediaFileRelation() {}

func (r mediaFileToRoomFindFirst) With(params ...RoomRelationWith) mediaFileToRoomFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r mediaFileToRoomFindFirst) Select(params ...mediaFilePrismaFields) mediaFileToRoomFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileToRoomFindFirst) Omit(params ...mediaFilePrismaFields) mediaFileToRoomFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range mediaFileOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileToRoomFindFirst) OrderBy(params ...RoomOrderByParam) mediaFileToRoomFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r mediaFileToRoomFindFirst) Skip(count int) mediaFileToRoomFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r mediaFileToRoomFindFirst) Take(count int) mediaFileToRoomFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r mediaFileToRoomFindFirst) Cursor(cursor MediaFileCursorParam) mediaFileToRoomFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r mediaFileToRoomFindFirst) Exec(ctx context.Context) (
	*MediaFileModel,
	error,
) {
	var v *MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r mediaFileToRoomFindFirst) ExecInner(ctx context.Context) (
	*InnerMediaFile,
	error,
) {
	var v *InnerMediaFile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type mediaFileToRoomFindMany struct {
	query builder.Query
}

func (r mediaFileToRoomFindMany) getQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomFindMany) with()              {}
func (r mediaFileToRoomFindMany) mediaFileModel()    {}
func (r mediaFileToRoomFindMany) mediaFileRelation() {}

func (r mediaFileToRoomFindMany) With(params ...RoomRelationWith) mediaFileToRoomFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r mediaFileToRoomFindMany) Select(params ...mediaFilePrismaFields) mediaFileToRoomFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileToRoomFindMany) Omit(params ...mediaFilePrismaFields) mediaFileToRoomFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range mediaFileOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileToRoomFindMany) OrderBy(params ...RoomOrderByParam) mediaFileToRoomFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r mediaFileToRoomFindMany) Skip(count int) mediaFileToRoomFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r mediaFileToRoomFindMany) Take(count int) mediaFileToRoomFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r mediaFileToRoomFindMany) Cursor(cursor MediaFileCursorParam) mediaFileToRoomFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r mediaFileToRoomFindMany) Exec(ctx context.Context) (
	[]MediaFileModel,
	error,
) {
	var v []MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r mediaFileToRoomFindMany) ExecInner(ctx context.Context) (
	[]InnerMediaFile,
	error,
) {
	var v []InnerMediaFile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r mediaFileToRoomFindMany) Update(params ...MediaFileSetParam) mediaFileToRoomUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MediaFile"

	r.query.Outputs = countOutput

	var v mediaFileToRoomUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type mediaFileToRoomUpdateMany struct {
	query builder.Query
}

func (r mediaFileToRoomUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileToRoomUpdateMany) mediaFileModel() {}

func (r mediaFileToRoomUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileToRoomUpdateMany) Tx() MediaFileManyTxResult {
	v := newMediaFileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r mediaFileToRoomFindMany) Delete() mediaFileToRoomDeleteMany {
	var v mediaFileToRoomDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MediaFile"

	v.query.Outputs = countOutput

	return v
}

type mediaFileToRoomDeleteMany struct {
	query builder.Query
}

func (r mediaFileToRoomDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p mediaFileToRoomDeleteMany) mediaFileModel() {}

func (r mediaFileToRoomDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileToRoomDeleteMany) Tx() MediaFileManyTxResult {
	v := newMediaFileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type mediaFileFindUnique struct {
	query builder.Query
}

func (r mediaFileFindUnique) getQuery() builder.Query {
	return r.query
}

func (r mediaFileFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileFindUnique) with()              {}
func (r mediaFileFindUnique) mediaFileModel()    {}
func (r mediaFileFindUnique) mediaFileRelation() {}

func (r mediaFileActions) FindUnique(
	params MediaFileEqualsUniqueWhereParam,
) mediaFileFindUnique {
	var v mediaFileFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "MediaFile"
	v.query.Outputs = mediaFileOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r mediaFileFindUnique) With(params ...MediaFileRelationWith) mediaFileFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r mediaFileFindUnique) Select(params ...mediaFilePrismaFields) mediaFileFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileFindUnique) Omit(params ...mediaFilePrismaFields) mediaFileFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range mediaFileOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileFindUnique) Exec(ctx context.Context) (
	*MediaFileModel,
	error,
) {
	var v *MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r mediaFileFindUnique) ExecInner(ctx context.Context) (
	*InnerMediaFile,
	error,
) {
	var v *InnerMediaFile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r mediaFileFindUnique) Update(params ...MediaFileSetParam) mediaFileUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MediaFile"

	var v mediaFileUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type mediaFileUpdateUnique struct {
	query builder.Query
}

func (r mediaFileUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileUpdateUnique) mediaFileModel() {}

func (r mediaFileUpdateUnique) Exec(ctx context.Context) (*MediaFileModel, error) {
	var v MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileUpdateUnique) Tx() MediaFileUniqueTxResult {
	v := newMediaFileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r mediaFileFindUnique) Delete() mediaFileDeleteUnique {
	var v mediaFileDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MediaFile"

	return v
}

type mediaFileDeleteUnique struct {
	query builder.Query
}

func (r mediaFileDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p mediaFileDeleteUnique) mediaFileModel() {}

func (r mediaFileDeleteUnique) Exec(ctx context.Context) (*MediaFileModel, error) {
	var v MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileDeleteUnique) Tx() MediaFileUniqueTxResult {
	v := newMediaFileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type mediaFileFindFirst struct {
	query builder.Query
}

func (r mediaFileFindFirst) getQuery() builder.Query {
	return r.query
}

func (r mediaFileFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileFindFirst) with()              {}
func (r mediaFileFindFirst) mediaFileModel()    {}
func (r mediaFileFindFirst) mediaFileRelation() {}

func (r mediaFileActions) FindFirst(
	params ...MediaFileWhereParam,
) mediaFileFindFirst {
	var v mediaFileFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "MediaFile"
	v.query.Outputs = mediaFileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r mediaFileFindFirst) With(params ...MediaFileRelationWith) mediaFileFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r mediaFileFindFirst) Select(params ...mediaFilePrismaFields) mediaFileFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileFindFirst) Omit(params ...mediaFilePrismaFields) mediaFileFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range mediaFileOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileFindFirst) OrderBy(params ...MediaFileOrderByParam) mediaFileFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r mediaFileFindFirst) Skip(count int) mediaFileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r mediaFileFindFirst) Take(count int) mediaFileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r mediaFileFindFirst) Cursor(cursor MediaFileCursorParam) mediaFileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r mediaFileFindFirst) Exec(ctx context.Context) (
	*MediaFileModel,
	error,
) {
	var v *MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r mediaFileFindFirst) ExecInner(ctx context.Context) (
	*InnerMediaFile,
	error,
) {
	var v *InnerMediaFile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type mediaFileFindMany struct {
	query builder.Query
}

func (r mediaFileFindMany) getQuery() builder.Query {
	return r.query
}

func (r mediaFileFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileFindMany) with()              {}
func (r mediaFileFindMany) mediaFileModel()    {}
func (r mediaFileFindMany) mediaFileRelation() {}

func (r mediaFileActions) FindMany(
	params ...MediaFileWhereParam,
) mediaFileFindMany {
	var v mediaFileFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "MediaFile"
	v.query.Outputs = mediaFileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r mediaFileFindMany) With(params ...MediaFileRelationWith) mediaFileFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r mediaFileFindMany) Select(params ...mediaFilePrismaFields) mediaFileFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileFindMany) Omit(params ...mediaFilePrismaFields) mediaFileFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range mediaFileOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r mediaFileFindMany) OrderBy(params ...MediaFileOrderByParam) mediaFileFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r mediaFileFindMany) Skip(count int) mediaFileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r mediaFileFindMany) Take(count int) mediaFileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r mediaFileFindMany) Cursor(cursor MediaFileCursorParam) mediaFileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r mediaFileFindMany) Exec(ctx context.Context) (
	[]MediaFileModel,
	error,
) {
	var v []MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r mediaFileFindMany) ExecInner(ctx context.Context) (
	[]InnerMediaFile,
	error,
) {
	var v []InnerMediaFile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r mediaFileFindMany) Update(params ...MediaFileSetParam) mediaFileUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MediaFile"

	r.query.Outputs = countOutput

	var v mediaFileUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type mediaFileUpdateMany struct {
	query builder.Query
}

func (r mediaFileUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileUpdateMany) mediaFileModel() {}

func (r mediaFileUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileUpdateMany) Tx() MediaFileManyTxResult {
	v := newMediaFileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r mediaFileFindMany) Delete() mediaFileDeleteMany {
	var v mediaFileDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MediaFile"

	v.query.Outputs = countOutput

	return v
}

type mediaFileDeleteMany struct {
	query builder.Query
}

func (r mediaFileDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p mediaFileDeleteMany) mediaFileModel() {}

func (r mediaFileDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileDeleteMany) Tx() MediaFileManyTxResult {
	v := newMediaFileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRoomUniqueTxResult() RoomUniqueTxResult {
	return RoomUniqueTxResult{
		result: &transaction.Result{},
	}
}

type RoomUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RoomUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RoomUniqueTxResult) IsTx() {}

func (r RoomUniqueTxResult) Result() (v *RoomModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRoomManyTxResult() RoomManyTxResult {
	return RoomManyTxResult{
		result: &transaction.Result{},
	}
}

type RoomManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RoomManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RoomManyTxResult) IsTx() {}

func (r RoomManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newMediaFileUniqueTxResult() MediaFileUniqueTxResult {
	return MediaFileUniqueTxResult{
		result: &transaction.Result{},
	}
}

type MediaFileUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p MediaFileUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p MediaFileUniqueTxResult) IsTx() {}

func (r MediaFileUniqueTxResult) Result() (v *MediaFileModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newMediaFileManyTxResult() MediaFileManyTxResult {
	return MediaFileManyTxResult{
		result: &transaction.Result{},
	}
}

type MediaFileManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p MediaFileManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p MediaFileManyTxResult) IsTx() {}

func (r MediaFileManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_username UserWithPrismaUsernameSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _username.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roomUpsertOne struct {
	query builder.Query
}

func (r roomUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r roomUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r roomUpsertOne) with()         {}
func (r roomUpsertOne) roomModel()    {}
func (r roomUpsertOne) roomRelation() {}

func (r roomActions) UpsertOne(
	params RoomEqualsUniqueWhereParam,
) roomUpsertOne {
	var v roomUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Room"
	v.query.Outputs = roomOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r roomUpsertOne) Create(

	_name RoomWithPrismaNameSetParam,

	optional ...RoomSetParam,
) roomUpsertOne {
	var v roomUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r roomUpsertOne) Update(
	params ...RoomSetParam,
) roomUpsertOne {
	var v roomUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r roomUpsertOne) Exec(ctx context.Context) (*RoomModel, error) {
	var v RoomModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roomUpsertOne) Tx() RoomUniqueTxResult {
	v := newRoomUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type mediaFileUpsertOne struct {
	query builder.Query
}

func (r mediaFileUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r mediaFileUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r mediaFileUpsertOne) with()              {}
func (r mediaFileUpsertOne) mediaFileModel()    {}
func (r mediaFileUpsertOne) mediaFileRelation() {}

func (r mediaFileActions) UpsertOne(
	params MediaFileEqualsUniqueWhereParam,
) mediaFileUpsertOne {
	var v mediaFileUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "MediaFile"
	v.query.Outputs = mediaFileOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r mediaFileUpsertOne) Create(

	optional ...MediaFileSetParam,
) mediaFileUpsertOne {
	var v mediaFileUpsertOne
	v.query = r.query

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r mediaFileUpsertOne) Update(
	params ...MediaFileSetParam,
) mediaFileUpsertOne {
	var v mediaFileUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r mediaFileUpsertOne) Exec(ctx context.Context) (*MediaFileModel, error) {
	var v MediaFileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r mediaFileUpsertOne) Tx() MediaFileUniqueTxResult {
	v := newMediaFileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
